javascript:(function(){const matchResult=window.location.pathname.match(/\/([^\/]+\/[^\/]+)(?:\/(?:tree|commits|blob)\/([^\/]+))?/);if(matchResult){(([_,repo])=>{const branchElement=document.querySelector("button[id='branch-picker-repos-header-ref-selector'] span[class^='Text']");const branch=branchElement?branchElement.textContent.trim():"main";fetch(`https://github.com/${repo}/tree/${branch}`).then((res)=> res.text()).then((res)=>{const mainDocument=new DOMParser().parseFromString(res,"text/html");let commitCount=mainDocument.evaluate(`//a[contains(@href,'${repo}/commits/${branch}')]`,mainDocument.body).iterateNext().innerText;commitCount=Number(commitCount.trim().split(' ')[0].replaceAll(',',''));const commitElement=mainDocument.evaluate(`//include-fragment[contains(@src,'${repo}/spoofed_commit_check/')]`,mainDocument.body).iterateNext();const commitId=commitElement.attributes['src'].value.split("/").pop();if(commitCount<35){window.open(`https://github.com/${repo}/commits/${branch}`);return;}const url=`https://github.com/${repo}/commits/${branch}?after=${commitId}+${commitCount-30}`;window.open(url);});})(matchResult);}else{alert("No repository found!");}})();